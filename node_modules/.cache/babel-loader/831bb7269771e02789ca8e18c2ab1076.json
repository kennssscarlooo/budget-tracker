{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = {},\n      prefix = designSystemPrefix,\n      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n      attribute = DEFAULT_ATTRIBUTE,\n      defaultMode = desisgnSystemMode,\n      defaultColorScheme = designSystemColorScheme\n    } = _ref;\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = baseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(null); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        document.body.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    React.useEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/Users/KennsCarlo/Desktop/budget-tracker-v1/node_modules/@mui/material/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","baseTheme","defaultMode","desisgnSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","enableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","resolvedColorScheme","css","rootCss","vars","rootVars","basePrefix","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","body","setAttribute","priorColorScheme","documentElement","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = baseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(null); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        document.body.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    React.useEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}